// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8HMNFKnEv7gJ55SbTqvTiU
// Component: 2QbDyMolKpzt
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ClaimBeanieHeader from "../../ClaimBeanieHeader"; // plasmic-import: UgLYtY_iEg/component
import ClaimButton from "../../ClaimButton"; // plasmic-import: SRxjb5uqQx/component
import WalletconnectButton from "../../WalletconnectButton"; // plasmic-import: 0SLk0MG_H_/component
import RoundBlackButton from "../../RoundBlackButton"; // plasmic-import: 4PjNop8mQb/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_im_xbeanies.module.css"; // plasmic-import: 8HMNFKnEv7gJ55SbTqvTiU/projectcss
import sty from "./PlasmicClaimPage.module.css"; // plasmic-import: 2QbDyMolKpzt/css
import Line1Icon from "./icons/PlasmicIcon__Line1"; // plasmic-import: 6RdOQRrPg/icon

export const PlasmicClaimPage__VariantProps = new Array();

export const PlasmicClaimPage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClaimPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: true ? ({ $props, $state, $queries, $ctx }) => "" : undefined
      },
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) =>
              $props.unnamedGroupOfVariants
          : undefined
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"claimPageVertContainer"}
          data-plasmic-override={overrides.claimPageVertContainer}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.claimPageVertContainer
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__wVg3K)}>
              <div
                data-plasmic-name={"claimPage"}
                data-plasmic-override={overrides.claimPage}
                className={classNames(projectcss.all, sty.claimPage)}
              >
                <div
                  data-plasmic-name={"rectangle2"}
                  data-plasmic-override={overrides.rectangle2}
                  className={classNames(projectcss.all, sty.rectangle2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z6E0I
                    )}
                  >
                    {"Verified"}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__y1Ga4)}
                  >
                    <ClaimBeanieHeader
                      data-plasmic-name={"claimBeanieHeader"}
                      data-plasmic-override={overrides.claimBeanieHeader}
                      className={classNames(
                        "__wab_instance",
                        sty.claimBeanieHeader
                      )}
                    />
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o4Lb
                    )}
                  >
                    {"1010 N. Ashland, Chicago IL"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vqoc3
                    )}
                  >
                    {"Copyright Â© 2022 imnotArt, LLC. All Rights Reserved."}
                  </div>

                  <div
                    data-plasmic-name={"imnotArt5"}
                    data-plasmic-override={overrides.imnotArt5}
                    className={classNames(projectcss.all, sty.imnotArt5)}
                  />

                  <Line1Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"frame1"}
                    data-plasmic-override={overrides.frame1}
                    className={classNames(projectcss.all, sty.frame1)}
                  >
                    <div
                      data-plasmic-name={"poweredBy"}
                      data-plasmic-override={overrides.poweredBy}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.poweredBy
                      )}
                    >
                      {"Powered by "}
                    </div>

                    <div
                      data-plasmic-name={"image3"}
                      data-plasmic-override={overrides.image3}
                      className={classNames(projectcss.all, sty.image3)}
                    />
                  </div>

                  <ClaimButton
                    data-plasmic-name={"claimButton"}
                    data-plasmic-override={overrides.claimButton}
                    className={classNames("__wab_instance", sty.claimButton)}
                  />

                  <WalletconnectButton
                    data-plasmic-name={"walletconnectButton"}
                    data-plasmic-override={overrides.walletconnectButton}
                    className={classNames(
                      "__wab_instance",
                      sty.walletconnectButton
                    )}
                  />

                  {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                    <div
                      data-plasmic-name={"ianButton"}
                      data-plasmic-override={overrides.ianButton}
                      className={classNames(projectcss.all, sty.ianButton)}
                      key={currentIndex}
                    >
                      {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                        <RoundBlackButton
                          data-plasmic-name={"roundBlackButton"}
                          data-plasmic-override={overrides.roundBlackButton}
                          className={classNames(
                            "__wab_instance",
                            sty.roundBlackButton
                          )}
                          key={currentIndex}
                        />
                      ))}
                    </div>
                  ))}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y3Eje
                    )}
                  >
                    {"OR"}
                  </div>

                  <div
                    data-plasmic-name={"imnotArt4"}
                    data-plasmic-override={overrides.imnotArt4}
                    className={classNames(projectcss.all, sty.imnotArt4)}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__tqXEv)}
                    displayHeight={"22px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"27px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/im_xbeanies/images/greencheckjpeg.jpeg",
                      fullWidth: 360,
                      fullHeight: 360,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__i8UH)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"151px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/im_xbeanies/images/ethDenverLogopng.png",
                  fullWidth: 1008,
                  fullHeight: 987,
                  aspectRatio: undefined
                }}
              />

              {true ? (
                <p.PlasmicImg
                  data-plasmic-name={"ethDenverLogo"}
                  data-plasmic-override={overrides.ethDenverLogo}
                  alt={""}
                  className={classNames(sty.ethDenverLogo)}
                  displayHeight={"121px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/im_xbeanies/images/ethDenverLogopng.png",
                    fullWidth: 1008,
                    fullHeight: 987,
                    aspectRatio: undefined
                  }}
                />
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  claimPageVertContainer: [
    "claimPageVertContainer",
    "claimPage",
    "rectangle2",
    "claimBeanieHeader",
    "imnotArt5",
    "svg",
    "frame1",
    "poweredBy",
    "image3",
    "claimButton",
    "walletconnectButton",
    "ianButton",
    "roundBlackButton",
    "imnotArt4",
    "ethDenverLogo"
  ],

  claimPage: [
    "claimPage",
    "rectangle2",
    "claimBeanieHeader",
    "imnotArt5",
    "svg",
    "frame1",
    "poweredBy",
    "image3",
    "claimButton",
    "walletconnectButton",
    "ianButton",
    "roundBlackButton",
    "imnotArt4"
  ],

  rectangle2: [
    "rectangle2",
    "claimBeanieHeader",
    "imnotArt5",
    "svg",
    "frame1",
    "poweredBy",
    "image3",
    "claimButton",
    "walletconnectButton",
    "ianButton",
    "roundBlackButton",
    "imnotArt4"
  ],

  claimBeanieHeader: ["claimBeanieHeader"],
  imnotArt5: ["imnotArt5"],
  svg: ["svg"],
  frame1: ["frame1", "poweredBy", "image3"],
  poweredBy: ["poweredBy"],
  image3: ["image3"],
  claimButton: ["claimButton"],
  walletconnectButton: ["walletconnectButton"],
  ianButton: ["ianButton", "roundBlackButton"],
  roundBlackButton: ["roundBlackButton"],
  imnotArt4: ["imnotArt4"],
  ethDenverLogo: ["ethDenverLogo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicClaimPage__ArgProps,
          internalVariantPropNames: PlasmicClaimPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicClaimPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "claimPageVertContainer") {
    func.displayName = "PlasmicClaimPage";
  } else {
    func.displayName = `PlasmicClaimPage.${nodeName}`;
  }
  return func;
}

export const PlasmicClaimPage = Object.assign(
  // Top-level PlasmicClaimPage renders the root element
  makeNodeComponent("claimPageVertContainer"),
  {
    // Helper components rendering sub-elements
    claimPage: makeNodeComponent("claimPage"),
    rectangle2: makeNodeComponent("rectangle2"),
    claimBeanieHeader: makeNodeComponent("claimBeanieHeader"),
    imnotArt5: makeNodeComponent("imnotArt5"),
    svg: makeNodeComponent("svg"),
    frame1: makeNodeComponent("frame1"),
    poweredBy: makeNodeComponent("poweredBy"),
    image3: makeNodeComponent("image3"),
    claimButton: makeNodeComponent("claimButton"),
    walletconnectButton: makeNodeComponent("walletconnectButton"),
    ianButton: makeNodeComponent("ianButton"),
    roundBlackButton: makeNodeComponent("roundBlackButton"),
    imnotArt4: makeNodeComponent("imnotArt4"),
    ethDenverLogo: makeNodeComponent("ethDenverLogo"),
    // Metadata about props expected for PlasmicClaimPage
    internalVariantProps: PlasmicClaimPage__VariantProps,
    internalArgProps: PlasmicClaimPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicClaimPage;
/* prettier-ignore-end */
